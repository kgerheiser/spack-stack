name: 'setup-spack-stack'
description: 'Creates a Spack environment. Requires -l in shell so bash_profile is sourced.'
inputs:
  name:
    description: 'Give the environment a name'
    required: false
    default: 'default'
  template:
    description: 'Base spack.yaml template. Default is an empty environment.'
    required: false
    default: 'empty'
  specs:
    description: 'Which application env to build'
    required: false
    default: ''
  compiler:
    description: 'Compiler (available options gcc@9, gcc@10, clang, apple-clang, intel)'
    required: true
    default: 'gcc@9'
  mpi:
    description: 'Which MPI flavor (openmpi, mpich, intel-oneapi-mpi)'
    required: false
    default: 'mpich@3'
  path:
    description: 'Use custom checkout of Spack Stack. Useful in the Spack repo CI.'
    required: false
    default: '${{ github.workspace }}/spack-stack'
  concretize_only:
    description: "Concretize environment without building."
    required: false
    default: 'false'
  site:
    description: "The suite for which to build."
    required: false
    default: 'linux.default'
outputs:
  envdir:
    description: 'Path to the fully configured spack.yaml'
    value: ${{ steps.setup-stack-env.outputs.envfile }}

runs:
  using: "composite"

  steps:

  - name: checkout-spack-stack
    if: ${{ inputs.use-local-checkout == 'false' }}
    uses: actions/checkout@v2
    with:
      repository: ${{ github.action_repository }}
      path: spack-stack
      submodules: true

  - name: stack-setup-gh-runner
    uses: ./.github/actions/stack-setup-gh-runner@feature/gh-action-refactor

  - name: cache-oneapi
    id: cache-oneapi
    uses: actions/cache@v2
    with:
      path: |
        /opt/intel
      key: intel-oneapi-latest
    
  - name: install-intel-oneapi
    if:  ${{ inputs.compiler == 'intel' }} && steps.cache-oneapi.outputs.cache-hit != 'true'
    uses: ./.github/actions/install-intel-oneapi@feature/gh-action-refactor

  - name: cache-mpi
    id: cache-mpi
    uses: actions/cache@v2
    with:
      path: ${{ github.workspace }}/mpi
      key: mpi-${{ inputs.mpi }}-${{ inputs.compiler }}.${{ runner.os }}3

  - name: install-mpi
    if: steps.cache-mpi.outputs.cache-hit != 'true'
    uses: ./.github/actions/install-mpi@feature/gh-action-refactor
    with:
      mpi: ${{ inputs.mpi }}
      compiler: ${{ inputs.compiler }}
      prefix: ${{ github.workspace }}/mpi

  - name: setup-stack-env
    shell: bash
    run: |
      cd ${{ inputs.path }}
      if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        source /opt/intel/oneapi/setvars.sh
      fi

      source setup.sh
      spack stack create env --template ${{ inputs.template }} --specs ${{ inputs.specs }} --name ${{ inputs.name }} --site ${{ inputs.site }}
      spack env activate envs/${{ inputs.name }}

      # LLVM Clang not in PATH, search for it specifically
      # Then, Fortran compilers are null, so set to gfortran
      # Add minimal compilers just to prevent other compilers from being used by accident
      if [[ "$RUNNER_OS" == "macOS" && ${{ inputs.compiler }} == "clang"* ]]; then
        spack compiler add $(brew --prefix llvm)
        sed -i".bak" "s|f77: null|f77: /usr/local/bin/gfortran-10|" ${SPACK_ENV}/spack.yaml
        sed -i".bak" "s|fc: null|fc: /usr/local/bin/gfortran-10|" ${SPACK_ENV}/spack.yaml
      elif [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        spack compiler add /opt/intel/oneapi/compiler/latest/linux/bin/intel64
        # Workaround for error "libimf.so cannot be found":
        sed -i 's#environment: {}#environment: {prepend_path: {LD_LIBRARY_PATH: /opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin}}#g' envs/${{ inputs.name }}/spack.yaml
      else
        spack compiler find
      fi

      # No external find for intel-oneapi-mpi, 
      # And no way to add object entry to list using "spack config add"
      # Add this first so "spack config add packages:" will append to this entry
      if [[ "${{ inputs.mpi }}" == "intel-oneapi-mpi" ]]; then
        impi_ver=$(find /opt/intel/oneapi/mpi -maxdepth 1 -mindepth 1 -type d | xargs basename)
        echo "" >> ${SPACK_ENV}/spack.yaml
        echo "  packages:" >> ${SPACK_ENV}/spack.yaml
        echo "    intel-oneapi-mpi:" >> ${SPACK_ENV}/spack.yaml
        echo "      buildable: False" >> ${SPACK_ENV}/spack.yaml
        echo "      externals:" >> ${SPACK_ENV}/spack.yaml
        echo "      - spec: intel-oneapi-mpi@${impi_ver}" >> ${SPACK_ENV}/spack.yaml
        echo "        prefix: /opt/intel/oneapi" >> ${SPACK_ENV}/spack.yaml
      else
        # So Spack can find external MPI
        export "PATH=${{ github.workspace }}/mpi/bin:${PATH}"
      fi

      # Make homebrew qt@5 detectable on macOS
      if [[ "$RUNNER_OS" == "macOS" ]]; then
        export "PATH=/usr/local/opt/qt@5/bin:${PATH}"
      fi

      # Spack external find is by default only looking for build-tools, Either
      # need to search for additional packages explicitly.
      spack external find
      spack external find mpich
      spack external find openmpi
      spack external find perl
      spack external find python@3
      spack external find qt@5
      spack external find wget

  - name: configure-options
    shell: bash
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}

      # Speed up builds using two build jobs per package and four
      # jobs in parallel further down (spack install)
      spack config add "config:build_jobs:2"

      # Use external MPI to save compilation time
      spack config add "packages:mpi:buildable:False"
      spack config add "packages:all:providers:mpi:[${{ inputs.mpi }}]"

      # Use external Python to save compilation time
      spack config add "packages:python:buildable:False"

      spack config add "packages:all:compiler:[${{ inputs.compiler }}]"

      # Currently, this is the case for all workflows - wrap in if statement
      # when this changes in the future
      # Whitelist the mpi providers so that spack creates the modules for them
      spack config add "modules:default:tcl:whitelist:[${{ inputs.mpi }}]"
      spack config add "modules:default:lmod:whitelist:[${{ inputs.mpi }}]"

      # Remove specs that don't build under certain configurations.
      if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        spack rm jedi-tools-env 2>/dev/null
      fi

      if [[ "$RUNNER_OS" == "macOS" && "${{ inputs.compiler }}" == "gcc"* ]]; then
        spack rm jedi-ewok-env 2>/dev/null
      fi

      mkdir ${GITHUB_WORKSPACE}/logs

  - name: concretize
    shell: bash
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
      cat ${SPACK_ENV}/spack.yaml
      spack concretize | tee ${GITHUB_WORKSPACE}/logs/concretize.txt

  - name: build-env
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    env:
      OMP_NUM_THREADS: 4
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
      # Speed up installation by building in parallel
      for i in {1..2}; do
        nohup spack install --fail-fast >> spack_install.log 2>&1 &
      done
      #
      while ps -ef | grep -ve 'grep' | grep 'spack install'; do
        echo "Still running"
        tail -n 10 spack_install.log
        sleep 60
      done

  - name: create-meta-modules
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    run: |
      if [[ ! "${{ inputs.specs }}" == "empty" ]]; then
        cd ${{ inputs.path }}
        source setup.sh
        spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
        spack module lmod refresh --yes-to-all
        spack stack setup-meta-modules
      fi

  - name: test-meta-modules
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    run: |
      if [[ ! "${{ inputs.specs }}" == "empty" ]]; then
        cd ${{ inputs.path }}
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          # Not yet: need lmod installed, loaded and module use command
          echo ""
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          source /usr/local/opt/lmod/init/profile
          module use $PWD/envs/${{ inputs.name }}/install/modulefiles/Core
          # This needs more work: need to replace "${{ inputs.compiler }}" = "gcc@9"
          # with "gcc/9", otherwise the module load command will fail.
          # module load stack-${{ inputs.compiler }}
          # module load stack-python
          # # jedi-tools doesn't have any mpi dependencies
          # if [[ ! "${{ inputs.specs }}" == "jedi-tools" ]]; then
          #   module load stack-${{ inputs.mpi }}
          # fi
        fi
      fi

  - name: Upload logs
    if: ${{ always() }}
    uses: actions/upload-artifact@v2
    with:
      name: ${{ runner.os }}-${{ inputs.compiler }}-${{ inputs.mpi }}-logs
      path: |
        ${{ github.workspace }}/logs/
        ${{ github.workspace }}/envs/${{ inputs.name }}/spack.yaml
